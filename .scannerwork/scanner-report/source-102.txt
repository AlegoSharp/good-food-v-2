import { Injectable } from '@angular/core';
import { Plugins } from '@capacitor/core';
import { LigneCommande } from '../models/LigneCommande';

const { Storage } = Plugins;
@Injectable({
    providedIn: 'root'
})
export class StorageService {

    constructor() { }


    /**
     * Sets a value in the localstorage witht specify a key.
     * Ajoute une donnée au localstorage indentifié par une clé
     * @param key               * Key of the stored value / Clé de la valeur
     * @param value             * Value to store / Valeur à stockée
     */
    public async setObject(key: string, value: any) {
        let valueStringify = JSON.stringify(value);
        await Storage.set({ key, value: valueStringify });
    }

    /**
     * Gets the value of the specified key in the localstorage
     * Récupère la valeur de la clé spécifiée dans le localstorage
     * @param key               * Key of the stored value / Clé de la valeur
     * @returns object value    * The object stored or UNDEFINED / L'objet stocké à l'emplacement de la clé Ou UNDEFINED
     */
    public getObjectValue(key: string): {value: any}{
        let result;
        this.getObject(key).then(value => result = value);
        return result;
    }

    /**
     * Gets the value of the specified key in the localstorage parsed as JSON object
     * Récupère la valeur de la clé spécifiée dans le localstorage parsé en objet JSON
     * @param key               * Key of the stored value / Clé de la valeur
     * @returns object          * The object stored or UNDEFINED / L'objet stocké à l'emplacement de la clé Ou UNDEFINED
     */
    public async getObject(key: string): Promise<{ value: any }> {
        const ret = await Storage.get({ key });
        return JSON.parse(ret.value);
    }


    /**
     * Removes ligne_commande from basket
     * Supprime une ligne_commande du panier
     * @param ligneCommande     * LigneCommande to delete / Ligne_commande à supprimer
     */
    public async removeItemFromBasket(ligneCommande: LigneCommande){
        let basket =  await this.getObject("basket").then(value => {
            return (value as unknown) as Array<LigneCommande>;
        });
        if(basket !== undefined){
            basket = basket.filter(w=>w.article.idArticle !== ligneCommande.article.idArticle);
            await this.setObject("basket",basket);
        }
    }

    /**
     * Replace ligne_commande from basket (edit item)
     * Remplace une ligne_commande du panier (edit item)
     * @param ligneCommande    * LigneCommande to replace / Ligne_commande à remplacer
     */
    public async replaceItemFromBasket(ligneCommande: LigneCommande){
        let basket =  await this.getObject("basket").then(value => {
            return (value as unknown) as Array<LigneCommande>;
        });
        if(basket !== undefined){
            
            let ligne = basket.findIndex(w=>w.article.idArticle === ligneCommande.article.idArticle);
            basket[ligne] = ligneCommande;
            await this.setObject("basket",basket);
        }
    }


    /**
     * Adds ligne_commande to basket
     * Ajouter une ligne_commande au panier
     * @param ligneCommande 
     */
    public async addItemToBasket(ligneCommande: LigneCommande){
        let basket = new Array<LigneCommande>();
        let tempBasket = await this.getObject("basket").then(value => {
            return (value as unknown) as Array<LigneCommande>;
        });
        if(tempBasket !== null){
            basket = tempBasket;
        }
        let itemExisitingIndex = basket.findIndex(ligne => ligne.article?.idArticle === ligneCommande.article.idArticle);
        if(itemExisitingIndex >= 0){
            let currentQty = basket[itemExisitingIndex].quantiteArticle;
            let addinQty = ligneCommande.quantiteArticle as number;
            let finalQty = 0;
            finalQty = Number.parseInt(currentQty.toString()) + Number.parseInt(addinQty.toString());
            basket[itemExisitingIndex].quantiteArticle = finalQty;
        }else{
            basket.push(ligneCommande);
        }
        await this.setObject("basket", basket);
    }
}